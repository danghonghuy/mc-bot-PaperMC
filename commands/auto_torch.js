// --- START OF FILE commands/auto_torch.js ---
const { Vec3 } = require("vec3");
const { sleep } = require("../utils");
const craftCommands = require("./craft");

const TORCH_LIGHT_THRESHOLD = 1;
const PLACEMENT_LIGHT_THRESHOLD = 3;
const CHECK_DISTANCE = 3;
const PLACE_COOLDOWN_MS = 2000;
const MIN_TORCH_DISTANCE = 7; // Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c ƒëu·ªëc
const REQUIRED_COAL = 1;
const REQUIRED_STICK = 1;
const TORCH_CRAFT_AMOUNT = 8;

const ENABLE_CREATE_SPOT = true;
const CREATE_SPOT_BLOCK_NAME = "dirt";
const ENABLE_MOVE_TO_PLACE = true;
const SEARCH_FURTHER_DISTANCE = 10;

let botInstance = null;
let aiModelInstance = null;
let lastPlaceTime = 0;
let isProcessingAutoTorch = false;

function initializeAutoTorch(bot, aiModel) {
  botInstance = bot;
  aiModelInstance = aiModel;
  isProcessingAutoTorch = false;
  lastPlaceTime = 0;
  console.log("[Auto Torch] ƒê√£ kh·ªüi t·∫°o. üî•");

  if (!aiModelInstance) {
    console.warn(
      "[Auto Torch] C·∫£nh b√°o: aiModel kh√¥ng ƒë∆∞·ª£c cung c·∫•p! Ch·∫ø t·∫°o t·ª± ƒë·ªông s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. ‚ö†Ô∏è"
    );
  }

  if (ENABLE_MOVE_TO_PLACE) {
    try {
      if (!botInstance.pathfinder) {
        const { pathfinder, Movements } = require("mineflayer-pathfinder");
        botInstance.loadPlugin(pathfinder);
        const defaultMove = new Movements(botInstance);
        botInstance.pathfinder.setMovements(defaultMove);
        console.log(
          "[Auto Torch] Pathfinder ƒë√£ ƒë∆∞·ª£c load cho ch·ª©c nƒÉng di chuy·ªÉn."
        );
      }
    } catch (err) {
      console.error(err.message);
    }
  }

  const createBlock = bot.registry.itemsByName[CREATE_SPOT_BLOCK_NAME];
  if (ENABLE_CREATE_SPOT && !createBlock) {
  }
}

async function checkAndPlaceTorch() {
    if (!botInstance || !botInstance.entity) return false; // Bot ch∆∞a s·∫µn s√†ng

    // Ki·ªÉm tra xem c√≥ t√°c v·ª• di chuy·ªÉn ho·∫∑c nhi·ªám v·ª• ∆∞u ti√™n n√†o kh√°c ƒëang ch·∫°y kh√¥ng
    if (botInstance.isNavigating || // C·ªù t·ª´ l·ªánh goto/waypoint
        botInstance.isFollowing ||  // C·ªù t·ª´ l·ªánh follow
        botInstance.isStripMining || // C·ªù t·ª´ l·ªánh strip_mine (v√¨ n√≥ c≈©ng di chuy·ªÉn nhi·ªÅu)
        botInstance.isHunting ||     // C·ªù t·ª´ l·ªánh hunt
        botInstance.isCollecting ||  // C·ªù t·ª´ l·ªánh collect (n·∫øu c√≥ di chuy·ªÉn)
        botInstance.isDepositing ||  // C·ªù t·ª´ l·ªánh deposit (n·∫øu c√≥ di chuy·ªÉn)
        botInstance.isFlattening || // C·ªù t·ª´ l·ªánh flatten
        botInstance.isFarmingWheat || // C·ªù t·ª´ l·ªánh farm wheat
        botInstance.isBuilding ||    // C·ªù t·ª´ l·ªánh build
        botInstance.isProtecting ||  // ƒêang b·∫£o v·ªá (c√≥ th·ªÉ di chuy·ªÉn)
        botInstance.isDefending ||   // ƒêang t·ª± v·ªá (ch·∫Øc ch·∫Øn di chuy·ªÉn)
        botInstance.isSleeping       // ƒêang ng·ªß
       )
    {
        // console.log("[Auto Torch] Skipping check: Another priority task is active."); // B·ªè comment n·∫øu mu·ªën debug
        return false; // Kh√¥ng ch·∫°y auto_torch n·∫øu bot ƒëang b·∫≠n vi·ªác kh√°c
    }
    // <<< K·∫æT TH√öC KI·ªÇM TRA >>>
  if (isProcessingAutoTorch) return false;

  const now = Date.now();
  if (now - lastPlaceTime < PLACE_COOLDOWN_MS) return false;

  const blockAtFeet = botInstance.blockAt(botInstance.entity.position);
  if (!blockAtFeet) return false;

  const lightLevelAtFeet = blockAtFeet.light;
  if (lightLevelAtFeet > TORCH_LIGHT_THRESHOLD) { // D√πng > thay v√¨ >= ƒë·ªÉ ƒë·∫∑t khi √°nh s√°ng <= ng∆∞·ª°ng
    return false;
}
   // === B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ===
   isProcessingAutoTorch = true; // <--- ƒê·∫∑t c·ªù NGAY L·∫¨P T·ª®C

   try {
       let torchItem = botInstance.inventory.findInventoryItem(botInstance.registry.itemsByName.torch.id);
       if (!torchItem) {
           console.log("[Auto Torch] Kh√¥ng c√≥ ƒëu·ªëc, th·ª≠ ch·∫ø t·∫°o...");
           const crafted = await checkAndCraftTorches(); // checkAndCraft ƒë√£ c√≥ log ri√™ng
           if (!crafted) {
               console.log("[Auto Torch] Ch·∫ø t·∫°o ƒëu·ªëc th·∫•t b·∫°i ho·∫∑c kh√¥ng ƒë·ªß nguy√™n li·ªáu.");
               isProcessingAutoTorch = false; // Reset flag
               return false;
           }
           await sleep(500); // Ch·ªù inventory c·∫≠p nh·∫≠t
           torchItem = botInstance.inventory.findInventoryItem(botInstance.registry.itemsByName.torch.id);
           if (!torchItem) {
               console.error("[Auto Torch] L·ªói: ƒê√£ b√°o ch·∫ø t·∫°o nh∆∞ng kh√¥ng t√¨m th·∫•y ƒëu·ªëc!");
               isProcessingAutoTorch = false; // Reset flag
               return false;
           }
           console.log("[Auto Torch] ƒê√£ ch·∫ø t·∫°o ƒëu·ªëc, ti·∫øp t·ª•c t√¨m ch·ªó ƒë·∫∑t.");
       }

       // *** ∆ØU TI√äN 1: ƒê·∫∂T T·ª®C TH·ªúI ***
       const blockAtHead = botInstance.blockAt(botInstance.entity.position.offset(0, 1, 0));
       if (!blockAtHead || !blockAtHead.position) {
            console.warn("[Auto Torch] Kh√¥ng th·ªÉ l·∫•y block ·ªü ƒë·∫ßu.");
            isProcessingAutoTorch = false; // Reset flag
            return false;
       }
       const immediatePlaceTarget = await findValidTorchPlacementOriginal(blockAtHead.position);
       if (immediatePlaceTarget) {
           console.log(`[Auto Torch] T√¨m th·∫•y v·ªã tr√≠ t·ª©c th·ªùi t·∫°i ${formatCoords(immediatePlaceTarget.position)}. Th·ª≠ ƒë·∫∑t...`);
           const placed = await validateAndPlaceTorch(immediatePlaceTarget, torchItem);
           if (placed) {
               console.log("[Auto Torch] ƒê·∫∑t ƒëu·ªëc t·ª©c th·ªùi th√†nh c√¥ng! ‚ú®");
               lastPlaceTime = Date.now();
               isProcessingAutoTorch = false; // Reset flag
               return true; // <--- Th√†nh c√¥ng, k·∫øt th√∫c
           } else {
                console.log("[Auto Torch] ƒê·∫∑t ƒëu·ªëc t·ª©c th·ªùi th·∫•t b·∫°i (validate/place).");
                // Kh√¥ng return, th·ª≠ c√°ch kh√°c
           }
       } else {
           // console.log("[Auto Torch] Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ t·ª©c th·ªùi h·ª£p l·ªá."); // Log ƒë√£ c√≥ trong h√†m t√¨m
       }

       // *** ∆ØU TI√äN 2: T·∫†O KH·ªêI ***
       if (ENABLE_CREATE_SPOT) {
           console.log("[Auto Torch] Th·ª≠ t·∫°o kh·ªëi ƒë·ªÉ ƒë·∫∑t ƒëu·ªëc...");
           const createdAndPlaced = await tryCreateAndPlaceTorch(torchItem);
           if (createdAndPlaced) {
               console.log("[Auto Torch] T·∫°o kh·ªëi v√† ƒë·∫∑t ƒëu·ªëc th√†nh c√¥ng! ‚ú®");
               lastPlaceTime = Date.now();
               isProcessingAutoTorch = false; // Reset flag
               return true; // <--- Th√†nh c√¥ng, k·∫øt th√∫c
           } else {
               // console.log("[Auto Torch] T·∫°o kh·ªëi v√† ƒë·∫∑t th·∫•t b·∫°i."); // H√†m con ƒë√£ c√≥ log l·ªói
               // Kh√¥ng return, th·ª≠ c√°ch kh√°c
           }
       }

       // *** ∆ØU TI√äN 3: DI CHUY·ªÇN (C√°ch g·ªçi ƒë√£ thay ƒë·ªïi) ***
       if (ENABLE_MOVE_TO_PLACE && botInstance.pathfinder) {
           console.log("[Auto Torch] Th·ª≠ t√¨m v·ªã tr√≠ xa h∆°n v√† di chuy·ªÉn ƒë·∫øn...");
           // G·ªçi h√†m m·ªõi (n√≥ tr·∫£ v·ªÅ Promise nh∆∞ng ch√∫ng ta kh√¥ng await)
           // N√≥ s·∫Ω tr·∫£ v·ªÅ false ngay l·∫≠p t·ª©c ƒë·ªÉ checkAndPlaceTorch k·∫øt th√∫c
           // v√† isProcessingAutoTorch s·∫Ω ngƒÉn ch·∫∑n l·∫ßn g·ªçi ti·∫øp theo cho ƒë·∫øn khi
           // Promise di chuy·ªÉn ƒë∆∞·ª£c gi·∫£i quy·∫øt (th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i).
           const movePromise = findAndMoveToPlaceTorch(torchItem);

           // X·ª≠ l√Ω k·∫øt qu·∫£ c·ªßa Promise ƒê·ªÇ reset c·ªù isProcessingAutoTorch
           movePromise.then(placedSuccessfully => {
                console.log(`[Auto Torch] K·∫øt qu·∫£ di chuy·ªÉn v√† ƒë·∫∑t (Promise): ${placedSuccessfully}`);
                if (placedSuccessfully) {
                    lastPlaceTime = Date.now(); // C·∫≠p nh·∫≠t th·ªùi gian n·∫øu th√†nh c√¥ng
                }
                isProcessingAutoTorch = false; // <<< RESET C·ªú ·ªû ƒê√ÇY KHI PROMISE K·∫æT TH√öC
           }).catch(err => {
               // Hi·∫øm khi x·∫£y ra n·∫øu Promise ƒë∆∞·ª£c c·∫•u tr√∫c ƒë√∫ng ƒë·ªÉ lu√¥n resolve
               console.error("[Auto Torch] L·ªói kh√¥ng mong mu·ªën t·ª´ Promise di chuy·ªÉn:", err);
               isProcessingAutoTorch = false; // <<< RESET C·ªú KHI C√ì L·ªñI KH√îNG MONG MU·ªêN
           });

            // Quan tr·ªçng: Tr·∫£ v·ªÅ false ngay l·∫≠p t·ª©c cho l·∫ßn g·ªçi checkAndPlaceTorch n√†y
            // v√¨ h√†nh ƒë·ªông di chuy·ªÉn/ƒë·∫∑t ƒëang di·ªÖn ra trong n·ªÅn.
            console.log("[Auto Torch] ƒê√£ b·∫Øt ƒë·∫ßu di chuy·ªÉn (n·∫øu t√¨m th·∫•y ch·ªó). K·∫øt th√∫c l·∫ßn ki·ªÉm tra n√†y.");
            return false; // <--- Lu√¥n tr·∫£ v·ªÅ false khi b·∫Øt ƒë·∫ßu di chuy·ªÉn

       } else if (ENABLE_MOVE_TO_PLACE && !botInstance.pathfinder) {
            console.warn("[Auto Torch] ƒê√£ b·∫≠t di chuy·ªÉn nh∆∞ng pathfinder kh√¥ng kh·∫£ d·ª•ng.");
       }

       // N·∫øu ƒë·∫øn ƒë√¢y t·ª©c l√† t·∫•t c·∫£ c√°c c√°ch ƒë·ªÅu th·∫•t b·∫°i (ho·∫∑c ƒë√£ b·∫Øt ƒë·∫ßu di chuy·ªÉn)
       console.log("[Auto Torch] Kh√¥ng th·ªÉ ƒë·∫∑t ƒëu·ªëc trong l·∫ßn ki·ªÉm tra n√†y.");
       isProcessingAutoTorch = false; // Reset flag n·∫øu kh√¥ng l√†m g√¨ c·∫£
       return false; // T·∫•t c·∫£ th·∫•t b·∫°i -> K·∫øt th√∫c

   } catch (err) {
       console.error("[Auto Torch] L·ªói kh√¥ng mong mu·ªën trong checkAndPlaceTorch:", err.message, err.stack);
       if (err.message?.includes('TransactionExpiredError')) {
           console.warn("[Auto Torch] TransactionExpiredError - c√≥ th·ªÉ do lag server.");
       }
       isProcessingAutoTorch = false; // Reset flag n·∫øu c√≥ l·ªói
       return false;
   }
}
async function checkAndCraftTorches() {
  const coalCount =
    botInstance.inventory.count(botInstance.registry.itemsByName.coal.id) +
    botInstance.inventory.count(botInstance.registry.itemsByName.charcoal.id);
  const stickCount = botInstance.inventory.count(
    botInstance.registry.itemsByName.stick.id
  );

  if (coalCount >= REQUIRED_COAL && stickCount >= REQUIRED_STICK) {
    if (!aiModelInstance) {
      return false;
    }
    try {
      const crafted = await craftCommands.craftItem(
        botInstance,
        "System",
        `ch·∫ø t·∫°o ${TORCH_CRAFT_AMOUNT} ƒëu·ªëc`,
        aiModelInstance,
        TORCH_CRAFT_AMOUNT
      );

      if (crafted) {
        return true;
      } else {
        return false;
      }
    } catch (craftError) {
      return false;
    }
  } else {
    console.log(
      `[Auto Torch] Kh√¥ng ƒë·ªß nguy√™n li·ªáu (C·∫ßn ${REQUIRED_COAL} coal/charcoal, ${REQUIRED_STICK} stick. C√≥ ${coalCount}, ${stickCount}).`
    );
    return false;
  }
}

// *** H√ÄM T√åM KI·∫æM G·ªêC ƒê√É S·ª¨A - TH√äM KI·ªÇM TRA ƒêU·ªêC G·∫¶N ***
async function findValidTorchPlacementOriginal(searchPoint) {
  if (!botInstance || !botInstance.version || !searchPoint) return null;

  const placeableFacesData = [
    { face: 2, vector: new Vec3(0, 0, 1) },
    { face: 3, vector: new Vec3(0, 0, -1) },
    { face: 4, vector: new Vec3(1, 0, 0) },
    { face: 5, vector: new Vec3(-1, 0, 0) },
  ];

  const nearbySolidBlocks = botInstance.findBlocks({
    matching: (block) =>
      block &&
      block.boundingBox === "block" &&
      block.name !== "air" &&
      !block.name.includes("torch") &&
      !block.name.includes("sign") &&
      !block.name.includes("door") &&
      !block.name.includes("gate"),
    point: searchPoint,
    maxDistance: CHECK_DISTANCE,
    count: 30,
  });

  let bestPlacement = null;
  let minDistanceSq = CHECK_DISTANCE * CHECK_DISTANCE;

  for (const pos of nearbySolidBlocks) {
    const wallBlock = botInstance.blockAt(pos);
    if (!wallBlock || !wallBlock.position) continue;

    for (const { face, vector } of placeableFacesData) {
      const torchPos = wallBlock.position.plus(vector);
      const blockAtTorchPos = botInstance.blockAt(torchPos);

      if (blockAtTorchPos && blockAtTorchPos.name === "air") {
        if (!botInstance.entity || !botInstance.entity.position) continue;
        const distSq = botInstance.entity.position.distanceSquared(torchPos);

        if (distSq <= 4.5 * 4.5 && distSq < minDistanceSq) {
          // *** KI·ªÇM TRA ƒêU·ªêC G·∫¶N ***
          const nearbyTorches = botInstance.findBlocks({
            point: torchPos,
            matching: (block) =>
              block && (block.name === "torch" || block.name === "wall_torch"),
            maxDistance: MIN_TORCH_DISTANCE,
            count: 1,
          });

          if (Array.isArray(nearbyTorches) && nearbyTorches.length === 0) {
            minDistanceSq = distSq;
            bestPlacement = {
              block: wallBlock,
              faceVector: vector,
              position: torchPos,
            };
          }
        }
      }
    }
  }
  if (!bestPlacement) {
    // Ch·ªâ log n·∫øu th·ª±c s·ª± kh√¥ng t√¨m th·∫•y v·ªã tr√≠ n√†o h·ª£p l·ªá (k·ªÉ c·∫£ v·ª• ƒëu·ªëc g·∫ßn)
  }
  return bestPlacement;
}

// *** H√ÄM VALIDATE V√Ä ƒê·∫∂T ƒêU·ªêC - GI·ªÆ NGUY√äN ***
async function validateAndPlaceTorch(placeTarget, torchItem) {
  if (
    !placeTarget ||
    !placeTarget.position ||
    !placeTarget.block ||
    !placeTarget.faceVector ||
    !torchItem
  ) {
    console.warn("[Auto Torch] D·ªØ li·ªáu ƒë·∫∑t kh√¥ng h·ª£p l·ªá.");
    return false;
  }

  const potentialTorchPos = placeTarget.position;
  const blockToPlaceOn = placeTarget.block;
  const faceToPlaceOn = placeTarget.faceVector;

  if (!botInstance.entity || !botInstance.entity.position) {
    console.warn(
      "[Auto Torch] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ bot ƒë·ªÉ ki·ªÉm tra t·∫ßm v·ªõi."
    );
    return false;
  }
  const distanceSq =
    botInstance.entity.position.distanceSquared(potentialTorchPos);
  if (distanceSq > 5.0 * 5.0) {
    return false;
  }

  const blockAtPlacement = botInstance.blockAt(potentialTorchPos);
  if (!blockAtPlacement) {
    console.warn(
      `[Auto Torch] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªëi t·∫°i v·ªã tr√≠ ƒë·∫∑t ${formatCoords(
        potentialTorchPos
      )}.`
    );
    return false;
  }
  if (blockAtPlacement.light >= PLACEMENT_LIGHT_THRESHOLD) {
    return false;
  }

  // Ki·ªÉm tra l·∫°i ƒëu·ªëc g·∫ßn nh∆∞ m·ªôt l·ªõp b·∫£o v·ªá cu·ªëi c√πng (d√π kh√¥ng c·∫ßn thi·∫øt n·∫øu t√¨m ki·∫øm ƒë√∫ng)
  const nearbyTorches = botInstance.findBlocks({
    point: potentialTorchPos,
    matching: (block) =>
      block && (block.name === "torch" || block.name === "wall_torch"),
    maxDistance: MIN_TORCH_DISTANCE,
    count: 1,
  });
  if (Array.isArray(nearbyTorches) && nearbyTorches.length > 0) {
    // Kh√¥ng n√™n log l·ªói ·ªü ƒë√¢y v√¨ h√†m t√¨m ki·∫øm ƒë√£ l·ªçc r·ªìi, n·∫øu v√†o ƒë√¢y c√≥ th·ªÉ do race condition
    // console.log(`[Auto Torch] H·ªßy ƒë·∫∑t (Validate): ƒê√£ c√≥ ƒëu·ªëc kh√°c qu√° g·∫ßn t·∫°i ${formatCoords(nearbyTorches[0])}.`);
    return false;
  }

  try {
    if (!botInstance.heldItem || botInstance.heldItem.type !== torchItem.type) {
      await botInstance.equip(torchItem, "hand");
      await sleep(200);
    }

    await botInstance.placeBlock(blockToPlaceOn, faceToPlaceOn);
    return true;
  } catch (placeError) {
    if (
      placeError.message.includes("Must be targeting a block") ||
      placeError.message.includes("rejected transaction") ||
      placeError.message.includes("Server misbehaved")
    ) {
      console.warn(
        "[Auto Torch] L·ªói server ho·∫∑c m·ª•c ti√™u kh√¥ng h·ª£p l·ªá khi ƒë·∫∑t ƒëu·ªëc."
      );
    }
    return false;
  }
}

// *** H√ÄM T·∫†O KH·ªêI - GI·ªÆ NGUY√äN ***
async function tryCreateAndPlaceTorch(torchItem) {
  const createBlockInfo =
    botInstance.registry.itemsByName[CREATE_SPOT_BLOCK_NAME];
  if (!createBlockInfo) {
    return false;
  }

  const createBlockItem = botInstance.inventory.findInventoryItem(
    createBlockInfo.id
  );
  if (!createBlockItem) {
    return false;
  }

  const botPos = botInstance.entity.position;
  if (!botPos) return false;

  let placementBaseBlock = null;
  let placePos = null;
  let bestDistSq = 3 * 3;

  const offsets = [
    { x: 1, z: 0 },
    { x: -1, z: 0 },
    { x: 0, z: 1 },
    { x: 0, z: -1 },
    { x: 1, z: 1 },
    { x: 1, z: -1 },
    { x: -1, z: 1 },
    { x: -1, z: -1 },
  ];

  for (const offset of offsets) {
    const checkPlacePos = botPos.offset(offset.x, 0, offset.z).floored();
    const checkBasePos = checkPlacePos.offset(0, -1, 0);

    const blockAtPlace = botInstance.blockAt(checkPlacePos);
    const blockAtBase = botInstance.blockAt(checkBasePos);

    if (
      blockAtBase &&
      blockAtBase.boundingBox === "block" &&
      blockAtBase.position &&
      blockAtPlace &&
      blockAtPlace.name === "air"
    ) {
      const distSq = checkPlacePos.distanceSquared(botPos);
      if (distSq <= 4.5 * 4.5 && distSq < bestDistSq) {
        if (blockAtBase.canPlaceOn) {
          try {
            if (
              await botInstance.canPlaceBlock(blockAtBase, new Vec3(0, 1, 0))
            ) {
              placementBaseBlock = blockAtBase;
              placePos = checkPlacePos;
              bestDistSq = distSq;
            }
          } catch (e) {
            /* B·ªè qua l·ªói */
          }
        }
      }
    }
  }

  if (!placementBaseBlock || !placePos) {
    return false;
  }

  try {
    if (
      !botInstance.heldItem ||
      botInstance.heldItem.type !== createBlockItem.type
    ) {
      await botInstance.equip(createBlockItem, "hand");
      await sleep(200);
    }
    const placeVector = new Vec3(0, 1, 0);
    await botInstance.placeBlock(placementBaseBlock, placeVector);
    await sleep(400);

    const newBlock = botInstance.blockAt(placePos);
    if (
      !newBlock ||
      newBlock.name !== CREATE_SPOT_BLOCK_NAME ||
      !newBlock.position
    ) {
      return false;
    }
    console.log(
      `[Auto Torch] ƒê√£ ƒë·∫∑t ${CREATE_SPOT_BLOCK_NAME} th√†nh c√¥ng. Gi·ªù ƒë·∫∑t ƒëu·ªëc l√™n tr√™n...`
    );

    const torchPlaceTarget = {
      block: newBlock,
      faceVector: new Vec3(0, 1, 0),
      position: newBlock.position.plus(new Vec3(0, 1, 0)),
    };

    // H√†m validate s·∫Ω ki·ªÉm tra √°nh s√°ng v√† ƒëu·ªëc g·∫ßn (quanh kh·ªëi m·ªõi)
    return await validateAndPlaceTorch(torchPlaceTarget, torchItem);
  } catch (createError) {
    console.error(
      `[Auto Torch] L·ªói khi t·∫°o kh·ªëi ${CREATE_SPOT_BLOCK_NAME} t·∫°i ${formatCoords(
        placePos
      )}:`,
      createError.message
    );
    if (createError.message.includes("Must be targeting a block")) {
      console.warn(
        "[Auto Torch] L·ªói 'Must be targeting a block' khi t·∫°o kh·ªëi."
      );
    }
    return false;
  }
}

// *** H√ÄM T√åM KI·∫æM XA H∆†N ƒê√É S·ª¨A - TH√äM KI·ªÇM TRA ƒêU·ªêC G·∫¶N ***
async function findValidTorchPlacementFurther(searchPoint, maxDist) {
  if (!botInstance || !botInstance.version || !searchPoint) return null;

  const placeableFacesData = [
    { face: 2, vector: new Vec3(0, 0, 1) },
    { face: 3, vector: new Vec3(0, 0, -1) },
    { face: 4, vector: new Vec3(1, 0, 0) },
    { face: 5, vector: new Vec3(-1, 0, 0) },
  ];

  const nearbySolidBlocks = botInstance.findBlocks({
    matching: (block) =>
      block &&
      block.boundingBox === "block" &&
      block.name !== "air" &&
      !block.name.includes("torch") &&
      !block.name.includes("sign") &&
      !block.name.includes("door") &&
      !block.name.includes("gate"),
    point: searchPoint,
    maxDistance: maxDist,
    count: 70,
  });

  let bestPlacement = null;
  let minDistanceSq = maxDist * maxDist;

  for (const pos of nearbySolidBlocks) {
    const wallBlock = botInstance.blockAt(pos);
    if (!wallBlock || !wallBlock.position) continue;

    for (const { face, vector } of placeableFacesData) {
      const torchPos = wallBlock.position.plus(vector);
      const blockAtTorchPos = botInstance.blockAt(torchPos);

      if (blockAtTorchPos && blockAtTorchPos.name === "air") {
        if (!botInstance.entity || !botInstance.entity.position) continue;
        const distSq = botInstance.entity.position.distanceSquared(torchPos);

        if (distSq < minDistanceSq) {
          // *** KI·ªÇM TRA ƒêU·ªêC G·∫¶N ***
          const nearbyTorches = botInstance.findBlocks({
            point: torchPos,
            matching: (block) =>
              block && (block.name === "torch" || block.name === "wall_torch"),
            maxDistance: MIN_TORCH_DISTANCE,
            count: 1,
          });

          if (Array.isArray(nearbyTorches) && nearbyTorches.length === 0) {
            minDistanceSq = distSq;
            bestPlacement = {
              block: wallBlock,
              faceVector: vector,
              position: torchPos,
            };
          }
        }
      }
    }
  }
  if (!bestPlacement) {
    // Log n·∫øu kh√¥ng t√¨m th·∫•y v·ªã tr√≠ n√†o xa h∆°n h·ª£p l·ªá
  }
  return bestPlacement;
}

// *** H√ÄM DI CHUY·ªÇN V√Ä ƒê·∫∂T - GI·ªÆ NGUY√äN ***
async function findAndMoveToPlaceTorch(torchItem) {
  if (!botInstance.pathfinder) {
    console.warn(
      "[Auto Torch] Pathfinder kh√¥ng kh·∫£ d·ª•ng, kh√¥ng th·ªÉ th·ª±c hi·ªán di chuy·ªÉn ƒë·ªÉ ƒë·∫∑t ƒëu·ªëc."
    );
    return false; // Tr·∫£ v·ªÅ false v√¨ kh√¥ng th·ªÉ di chuy·ªÉn
  }

  let GoalNear;
  try {
    GoalNear = require("mineflayer-pathfinder").goals.GoalNear;
  } catch (e) {
    console.error("[Auto Torch] Kh√¥ng th·ªÉ load GoalNear t·ª´ pathfinder.");
    return false; // Tr·∫£ v·ªÅ false v√¨ thi·∫øu goal
  }

  if (!botInstance.entity || !botInstance.entity.position) {
    console.warn(
      "[Auto Torch] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ bot ƒë·ªÉ t√¨m ki·∫øm xa h∆°n."
    );
    return false; // Tr·∫£ v·ªÅ false v√¨ thi·∫øu v·ªã tr√≠ bot
  }

  // --- T√¨m ki·∫øm v·ªã tr√≠ ---
  // H√†m n√†y v·∫´n d√πng await nh∆∞ng th∆∞·ªùng nhanh h∆°n goto
  const furtherPlaceTarget = await findValidTorchPlacementFurther(
    botInstance.entity.position,
    SEARCH_FURTHER_DISTANCE
  );

  if (
    !furtherPlaceTarget ||
    !furtherPlaceTarget.position ||
    !furtherPlaceTarget.block ||
    !furtherPlaceTarget.faceVector
  ) {
    // Log ƒë√£ c√≥ trong h√†m t√¨m ki·∫øm
    // console.log("[Auto Torch] Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ƒë·∫∑t ti·ªÅm nƒÉng n√†o xa h∆°n h·ª£p l·ªá.");
    return false; // Tr·∫£ v·ªÅ false v√¨ kh√¥ng t√¨m th·∫•y ch·ªó ƒë·∫∑t
  }

  const targetTorchPos = furtherPlaceTarget.position;
  const goal = new GoalNear(
    targetTorchPos.x,
    targetTorchPos.y,
    targetTorchPos.z,
    2
  );

  console.log(
    `[Auto Torch] T√¨m th·∫•y v·ªã tr√≠ ti·ªÅm nƒÉng xa h∆°n t·∫°i ${formatCoords(
      targetTorchPos
    )}. B·∫Øt ƒë·∫ßu di chuy·ªÉn...`
  );

  // --- S·ª≠ d·ª•ng Promise ƒë·ªÉ qu·∫£n l√Ω k·∫øt qu·∫£ kh√¥ng ƒë·ªìng b·ªô ---
  return new Promise((resolve) => {
    let moveTimeout; // Timer ƒë·ªÉ h·ªßy n·∫øu di chuy·ªÉn qu√° l√¢u
    let listenersAttached = false;

    // H√†m d·ªçn d·∫πp listener
    const cleanupListeners = () => {
      if (!listenersAttached) return;
      // console.log("[Auto Torch Move] Cleaning up pathfinder listeners."); // Debug log
      botInstance.pathfinder.removeListener("goal_reached", onGoalReached);
      botInstance.removeListener("path_update", onPathUpdate); // Ho·∫∑c s·ª± ki·ªán l·ªói kh√°c n·∫øu pathfinder d√πng 'error'
      botInstance.removeListener("error", onPathError); // B·∫Øt l·ªói chung c·ªßa bot c≈©ng c√≥ th·ªÉ li√™n quan
      botInstance.removeListener("path_reset", onPathReset); // Khi path b·ªã reset
      botInstance.removeListener("goal_updated", onGoalUpdated); // Khi m·ª•c ti√™u b·ªã ghi ƒë√®?
      clearTimeout(moveTimeout);
      listenersAttached = false;
    };

    // --- C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán ---
    const onGoalReached = async () => {
      console.log(
        `[Auto Torch] ƒê√£ ƒë·∫øn g·∫ßn v·ªã tr√≠ ${formatCoords(
          targetTorchPos
        )}. Th·ª≠ ƒë·∫∑t ƒëu·ªëc...`
      );
      cleanupListeners();
      await sleep(300); // Ch·ªù ·ªïn ƒë·ªãnh
      const placed = await validateAndPlaceTorch(furtherPlaceTarget, torchItem);
      if (!placed) {
        console.log(
          "[Auto Torch] ƒê√£ ƒë·∫øn n∆°i nh∆∞ng ƒë·∫∑t ƒëu·ªëc th·∫•t b·∫°i (validate/place)."
        );
      }
      resolve(placed); // Gi·∫£i quy·∫øt Promise v·ªõi k·∫øt qu·∫£ ƒë·∫∑t ƒëu·ªëc
    };

    const onPathUpdate = (results) => {
      // C√≥ th·ªÉ d√πng ƒë·ªÉ ki·ªÉm tra n·∫øu path kh√¥ng th·ªÉ ho√†n th√†nh s·ªõm
      if (results.status === "noPath") {
        console.log(
          `[Auto Torch] Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng ƒëi ƒë·∫øn ${formatCoords(
            targetTorchPos
          )} (Path Update).`
        );
        cleanupListeners();
        resolve(false); // Gi·∫£i quy·∫øt Promise l√† th·∫•t b·∫°i
      }
    };

    const onPathError = (err) => {
      // Ki·ªÉm tra xem l·ªói c√≥ li√™n quan ƒë·∫øn pathfinding kh√¥ng
      // ƒêi·ªÅu n√†y h∆°i kh√≥ v√¨ s·ª± ki·ªán 'error' c·ªßa bot l√† chung chung
      // C√≥ th·ªÉ c·∫ßn ki·ªÉm tra err.message ho·∫∑c lo·∫°i l·ªói
      if (
        err &&
        (err.message.toLowerCase().includes("path") ||
          err.message.toLowerCase().includes("goal"))
      ) {
        console.error(
          `[Auto Torch] L·ªói Pathfinder khi di chuy·ªÉn: ${err.message}`
        );
        cleanupListeners();
        resolve(false); // Gi·∫£i quy·∫øt Promise l√† th·∫•t b·∫°i
      }
    };

    const onPathReset = (reason) => {
      // L√Ω do c√≥ th·ªÉ l√† 'goal_updated', 'move_interrupt', 'block_updated', etc.
      console.log(
        `[Auto Torch] Di chuy·ªÉn b·ªã ƒë·∫∑t l·∫°i/gi√°n ƒëo·∫°n. L√Ω do: ${
          reason || "Kh√¥ng r√µ"
        }`
      );
      // N·∫øu b·ªã gi√°n ƒëo·∫°n b·ªüi th·ª© kh√°c, coi nh∆∞ th·∫•t b·∫°i cho auto torch l·∫ßn n√†y
      cleanupListeners();
      resolve(false);
    };

    const onGoalUpdated = (newGoal) => {
      // Ai ƒë√≥ ƒë√£ ƒë·∫∑t m·ª•c ti√™u m·ªõi cho pathfinder!
      console.warn(
        `[Auto Torch] M·ª•c ti√™u di chuy·ªÉn b·ªã ghi ƒë√®! H·ªßy ƒë·∫∑t ƒëu·ªëc t·ª± ƒë·ªông.`
      );
      cleanupListeners();
      resolve(false);
    };

    // --- Thi·∫øt l·∫≠p di chuy·ªÉn v√† g·∫Øn listener ---
    try {
      // G·∫Øn listener TR∆Ø·ªöC KHI setGoal ƒë·ªÉ kh√¥ng b·ªè l·ª° s·ª± ki·ªán
      botInstance.pathfinder.once("goal_reached", onGoalReached);
      botInstance.on("path_update", onPathUpdate); // C√≥ th·ªÉ ph√°t ra nhi·ªÅu l·∫ßn
      botInstance.on("error", onPathError); // L·∫Øng nghe l·ªói chung
      botInstance.on("path_reset", onPathReset); // L·∫Øng nghe reset
      botInstance.on("goal_updated", onGoalUpdated); // L·∫Øng nghe m·ª•c ti√™u b·ªã ƒë·ªïi
      listenersAttached = true;
      // console.log("[Auto Torch Move] Listeners attached."); // Debug log

      // ƒê·∫∑t m·ª•c ti√™u (NON-BLOCKING)
      botInstance.pathfinder.setGoal(goal);

      // ƒê·∫∑t timeout ƒë·ªÉ tr√°nh ch·ªù ƒë·ª£i v√¥ h·∫°n n·∫øu b·ªã k·∫πt ho·∫∑c s·ª± ki·ªán kh√¥ng ƒë∆∞·ª£c k√≠ch ho·∫°t
      moveTimeout = setTimeout(() => {
        if (listenersAttached) {
          // Ch·ªâ h·ªßy n·∫øu listener v·∫´n c√≤n ƒë√≥
          console.warn(
            `[Auto Torch] H·∫øt th·ªùi gian ch·ªù di chuy·ªÉn ƒë·∫øn ${formatCoords(
              targetTorchPos
            )}. H·ªßy b·ªè.`
          );
          cleanupListeners();
          if (botInstance.pathfinder.isMoving()) {
            botInstance.pathfinder.stop(); // C·ªë g·∫Øng d·ª´ng n·∫øu ƒëang di chuy·ªÉn
          }
          resolve(false); // Gi·∫£i quy·∫øt Promise l√† th·∫•t b·∫°i
        }
      }, 20000); // Ch·ªù t·ªëi ƒëa 20 gi√¢y

      // Quan tr·ªçng: H√†m n√†y kh√¥ng c√≤n tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë·∫∑t ƒëu·ªëc tr·ª±c ti·∫øp n·ªØa
      // N√≥ tr·∫£ v·ªÅ m·ªôt Promise s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt b·ªüi c√°c listener s·ª± ki·ªán
      // resolve(true); // <-- X√ìA D√íNG N√ÄY, KH√îNG RESOLVE NGAY L·∫¨P T·ª®C
      // B·∫£n th√¢n h√†m findAndMoveToPlaceTorch s·∫Ω k·∫øt th√∫c ngay sau khi setGoal
      // v√† tr·∫£ v·ªÅ Promise ƒëang ch·ªù c√°c listener gi·∫£i quy·∫øt n√≥.
      // H√†m checkAndPlaceTorch s·∫Ω nh·∫≠n ƒë∆∞·ª£c Promise n√†y nh∆∞ng kh√¥ng await n√≥
      // m√† s·∫Ω return false ngay l·∫≠p t·ª©c, v√¨ k·∫øt qu·∫£ ch∆∞a c√≥.
    } catch (setupError) {
      console.error(
        `[Auto Torch] L·ªói khi thi·∫øt l·∫≠p di chuy·ªÉn ho·∫∑c listener: ${setupError.message}`
      );
      cleanupListeners(); // D·ªçn d·∫πp n·∫øu l·ªói ngay t·ª´ ƒë·∫ßu
      resolve(false); // Gi·∫£i quy·∫øt Promise l√† th·∫•t b·∫°i
    }
  }); // K·∫øt th√∫c new Promise

  // <<< QUAN TR·ªåNG: Logic m·ªõi cho h√†m g·ªçi >>>
  // H√†m findAndMoveToPlaceTorch gi·ªù tr·∫£ v·ªÅ m·ªôt Promise, nh∆∞ng h√†m checkAndPlaceTorch
  // kh√¥ng n√™n await n√≥ v√¨ n√≥ kh√¥ng ch·∫∑n. checkAndPlaceTorch s·∫Ω coi nh∆∞ vi·ªác
  // di chuy·ªÉn ƒë√£ b·∫Øt ƒë·∫ßu v√† s·∫Ω return false cho l·∫ßn ki·ªÉm tra hi·ªán t·∫°i.
  // K·∫øt qu·∫£ th·ª±c s·ª± s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi c√°c listener.
  return false; // <<<< LU√îN TR·∫¢ V·ªÄ FALSE NGAY L·∫¨P T·ª®C
  // v√¨ vi·ªác di chuy·ªÉn v√† ƒë·∫∑t ƒëu·ªëc s·∫Ω di·ªÖn ra trong n·ªÅn.
  // isProcessingAutoTorch s·∫Ω ngƒÉn l·∫ßn ki·ªÉm tra ti·∫øp theo
  // cho ƒë·∫øn khi Promise ƒë∆∞·ª£c gi·∫£i quy·∫øt (d√π th√†nh c√¥ng hay th·∫•t b·∫°i).
  // C·∫ßn ƒë·∫£m b·∫£o isProcessingAutoTorch ƒë∆∞·ª£c reset trong cleanupListeners
  // ho·∫∑c sau khi resolve Promise. --> Ch·ªânh s·ª≠a checkAndPlaceTorch
} // K·∫øt th√∫c h√†m findAndMoveToPlaceTorch

// *** H√ÄM FORMAT COORDS - GI·ªÆ NGUY√äN ***
function formatCoords(pos) {
  if (
    !pos ||
    typeof pos.x !== "number" ||
    typeof pos.y !== "number" ||
    typeof pos.z !== "number"
  ) {
    return "N/A";
  }
  return `(${Math.floor(pos.x)}, ${Math.floor(pos.y)}, ${Math.floor(pos.z)})`;
}

// *** EXPORTS - GI·ªÆ NGUY√äN ***
module.exports = {
  initializeAutoTorch,
  checkAndPlaceTorch,
  get isProcessingAutoTorch() {
    return isProcessingAutoTorch;
  },
};
// --- END OF FILE commands/auto_torch.js ---
