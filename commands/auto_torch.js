// --- START OF FILE commands/auto_torch.js ---
const { Vec3 } = require("vec3");
const { sleep } = require("../utils");
const craftCommands = require("./craft");

// --- Ng∆∞·ª°ng v√† C√†i ƒë·∫∑t ---
const TORCH_LIGHT_THRESHOLD = 3;      // M·ª©c √°nh s√°ng t·∫°i ch√¢n bot ƒë·ªÉ k√≠ch ho·∫°t ƒë·∫∑t ƒëu·ªëc (<= ng∆∞·ª°ng n√†y s·∫Ω ƒë·∫∑t)
const PLACEMENT_LIGHT_THRESHOLD = 7;  // M·ª©c √°nh s√°ng t·ªëi ƒëa cho ph√©p t·∫°i v·ªã tr√≠ S·∫º ƒê·∫∂T ƒëu·ªëc (ƒë·∫∑t n·∫øu < ng∆∞·ª°ng n√†y) - D√πng cho validate
const CHECK_DISTANCE = 3;             // Kho·∫£ng c√°ch t√¨m t∆∞·ªùng xung quanh ƒë·ªÉ ƒë·∫∑t
const PLACE_COOLDOWN_MS = 2000;       // Th·ªùi gian ch·ªù t·ªëi thi·ªÉu gi·ªØa 2 l·∫ßn ƒë·∫∑t ƒëu·ªëc
const MIN_TORCH_DISTANCE = 7;         // Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c ƒëu·ªëc ƒë√£ ƒë·∫∑t v√† v·ªã tr√≠ m·ªõi
const REQUIRED_COAL = 1;
const REQUIRED_STICK = 1;
const TORCH_CRAFT_AMOUNT = 8;         // S·ªë l∆∞·ª£ng ƒëu·ªëc ch·∫ø t·∫°o m·ªói l·∫ßn

// --- T√πy ch·ªçn h√†nh vi ---
const ENABLE_CREATE_SPOT = true;      // B·∫≠t/t·∫Øt kh·∫£ nƒÉng t·∫°o kh·ªëi ƒë·∫•t ƒë·ªÉ ƒë·∫∑t ƒëu·ªëc
const CREATE_SPOT_BLOCK_NAME = "dirt"; // Lo·∫°i kh·ªëi s·∫Ω t·∫°o (c·∫ßn c√≥ trong inventory)
// const ENABLE_MOVE_TO_PLACE = false; // ƒê√£ lo·∫°i b·ªè logic n√†y

// --- Bi·∫øn tr·∫°ng th√°i ---
let botInstance = null;
let aiModelInstance = null;
let lastPlaceTime = 0;
let isProcessingAutoTorch = false;

// --- Kh·ªüi t·∫°o ---
function initializeAutoTorch(bot, aiModel) {
  botInstance = bot;
  aiModelInstance = aiModel;
  isProcessingAutoTorch = false;
  lastPlaceTime = 0;
  console.log("[Auto Torch] ƒê√£ kh·ªüi t·∫°o (Ch·∫ø ƒë·ªô ƒë·∫∑t t·∫°i ch·ªó). üî•");

  if (!aiModelInstance) {
    console.warn(
      "[Auto Torch] C·∫£nh b√°o: aiModel kh√¥ng ƒë∆∞·ª£c cung c·∫•p! Ch·∫ø t·∫°o t·ª± ƒë·ªông s·∫Ω kh√¥ng ho·∫°t ƒë·ªông. ‚ö†Ô∏è"
    );
  }

  // Kh√¥ng c·∫ßn load pathfinder cho auto_torch n·ªØa n·∫øu ch·ªâ ƒë·∫∑t t·∫°i ch·ªó
  // Tuy nhi√™n, c√°c module kh√°c c√≥ th·ªÉ c·∫ßn n√™n t·∫°m th·ªùi kh√¥ng x√≥a ph·∫ßn load
  try {
    if (!botInstance.pathfinder) {
      const { pathfinder, Movements } = require("mineflayer-pathfinder");
      botInstance.loadPlugin(pathfinder);
      const defaultMove = new Movements(botInstance);
      botInstance.pathfinder.setMovements(defaultMove);
      // console.log("[Auto Torch] Pathfinder ƒë√£ ƒë∆∞·ª£c load (c√≥ th·ªÉ c·∫ßn cho module kh√°c).");
    }
  } catch (err) {
    // console.error("[Auto Torch] L·ªói load pathfinder:", err.message);
  }


  const createBlock = bot.registry.itemsByName[CREATE_SPOT_BLOCK_NAME];
  if (ENABLE_CREATE_SPOT && !createBlock) {
    console.warn(`[Auto Torch] Kh·ªëi ${CREATE_SPOT_BLOCK_NAME} kh√¥ng t·ªìn t·∫°i trong registry game! T·∫Øt ch·ª©c nƒÉng t·∫°o kh·ªëi.`);
    // ENABLE_CREATE_SPOT = false; // Ho·∫∑c x·ª≠ l√Ω l·ªói kh√°c
  }
}

// --- H√†m ki·ªÉm tra v√† ƒë·∫∑t ƒëu·ªëc ch√≠nh ---
async function checkAndPlaceTorch() {
  if (!botInstance || !botInstance.entity) return false; // Bot ch∆∞a s·∫µn s√†ng

  // *** KI·ªÇM TRA KH·ªêI D∆Ø·ªöI CH√ÇN ƒê·ªÇ TR√ÅNH L·ªñI ***
  const posBelowFeet = botInstance.entity.position.offset(0, -0.1, 0).floored(); // V·ªã tr√≠ ngay d∆∞·ªõi ch√¢n
  const blockBelow = botInstance.blockAt(posBelowFeet);
  // N·∫øu kh√¥ng c√≥ kh·ªëi d∆∞·ªõi ch√¢n ho·∫∑c l√† air (ƒëang r∆°i?), ho·∫∑c kh√¥ng ph·∫£i kh·ªëi r·∫Øn th√¨ b·ªè qua
  if (!blockBelow || blockBelow.name === "air" || blockBelow.boundingBox !== 'block') {
    // console.log("[Auto Torch] B·ªè qua: ƒêang r∆°i ho·∫∑c kh√¥ng c√≥ kh·ªëi r·∫Øn d∆∞·ªõi ch√¢n.");
    return false;
  }

  // Ki·ªÉm tra c√°c t√°c v·ª• ∆∞u ti√™n kh√°c ƒëang ch·∫°y
  if (
    botInstance.isNavigating || botInstance.isFollowing || botInstance.isStripMining ||
    botInstance.isHunting || botInstance.isCollecting || botInstance.isDepositing ||
    botInstance.isFlattening || botInstance.isFarmingWheat || botInstance.isBuilding ||
    botInstance.isProtecting || botInstance.isDefending || botInstance.isSleeping
  ) {
    // console.log("[Auto Torch] Skipping check: Another priority task is active.");
    return false;
  }

  // Ki·ªÉm tra x·ª≠ l√Ω v√† cooldown
  if (isProcessingAutoTorch) return false;
  const now = Date.now();
  if (now - lastPlaceTime < PLACE_COOLDOWN_MS) return false;

  // *** KI·ªÇM TRA √ÅNH S√ÅNG T·∫†I V·ªä TR√ç CH√ÇN BOT ***
  const blockAtFeet = botInstance.blockAt(botInstance.entity.position.floored()); // L·∫•y kh·ªëi t·∫°i ch√¢n (c√≥ th·ªÉ l√† air)
  if (!blockAtFeet) return false; // Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin kh·ªëi

  // N·∫øu kh·ªëi t·∫°i ch√¢n ƒë√£ l√† ƒëu·ªëc th√¨ b·ªè qua
  if (blockAtFeet.name.includes('torch')) {
    // console.log("[Auto Torch DEBUG] Block at feet is already a torch. Skipping.");
    return false;
  }

  const lightLevelAtFeet = blockAtFeet.light || 0; // L·∫•y √°nh s√°ng t·∫°i ch√¢n, m·∫∑c ƒë·ªãnh l√† 0 n·∫øu l·ªói

  // --- DEBUG LOG ---
  const currentPos = botInstance.entity.position;
  // console.log(`[Auto Torch DEBUG] Pos: ${formatCoords(currentPos)}, BlockBelow: ${blockBelow.name}(${blockBelow.type}), FeetBlock: ${blockAtFeet.name}(${blockAtFeet.type}), Light@Feet: ${lightLevelAtFeet}, Threshold: ${TORCH_LIGHT_THRESHOLD}`);
  // ---------------

  // N·∫øu √°nh s√°ng ƒë·ªß, kh√¥ng c·∫ßn l√†m g√¨ c·∫£
  if (lightLevelAtFeet >= TORCH_LIGHT_THRESHOLD) {
    // console.log("[Auto Torch DEBUG] Light OK, skipping.");
    return false;
  }

  // === B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ƒê·∫∂T ƒêU·ªêC ===
  // console.log(`[Auto Torch] Ph√°t hi·ªán √°nh s√°ng th·∫•p (${lightLevelAtFeet}), b·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·∫∑t ƒëu·ªëc...`);
  isProcessingAutoTorch = true;

  try {
    // 1. Ki·ªÉm tra v√† ch·∫ø t·∫°o ƒëu·ªëc n·∫øu c·∫ßn
    let torchItem = botInstance.inventory.findInventoryItem(botInstance.registry.itemsByName.torch.id);
    if (!torchItem) {
      // console.log("[Auto Torch] Kh√¥ng c√≥ ƒëu·ªëc, th·ª≠ ch·∫ø t·∫°o...");
      const crafted = await checkAndCraftTorches();
      if (!crafted) {
        // console.log("[Auto Torch] Ch·∫ø t·∫°o ƒëu·ªëc th·∫•t b·∫°i ho·∫∑c kh√¥ng ƒë·ªß nguy√™n li·ªáu.");
        isProcessingAutoTorch = false;
        return false;
      }
      await sleep(500); // Ch·ªù inventory c·∫≠p nh·∫≠t
      torchItem = botInstance.inventory.findInventoryItem(botInstance.registry.itemsByName.torch.id);
      if (!torchItem) {
        // console.error("[Auto Torch] L·ªói: ƒê√£ b√°o ch·∫ø t·∫°o nh∆∞ng kh√¥ng t√¨m th·∫•y ƒëu·ªëc!");
        isProcessingAutoTorch = false;
        return false;
      }
      // console.log("[Auto Torch] ƒê√£ ch·∫ø t·∫°o ƒëu·ªëc, ti·∫øp t·ª•c t√¨m ch·ªó ƒë·∫∑t.");
    }

    // *** ∆ØU TI√äN 1: ƒê·∫∂T NGAY D∆Ø·ªöI CH√ÇN ***
    // (S·ª≠ d·ª•ng l·∫°i blockBelow v√† blockAtFeet ƒë√£ l·∫•y ·ªü tr√™n)
    // console.log(`[DEBUG P1 Check] blockBelow: ${!!blockBelow}, boundingBox: ${blockBelow?.boundingBox}, canPlaceOn: ${blockBelow?.canPlaceOn}, blockAtFeet: ${!!blockAtFeet}, feetNameAir: ${blockAtFeet?.name === 'air'}`);
    if (blockBelow && blockBelow.boundingBox === 'block'  && blockAtFeet && blockAtFeet.name === 'air') {
        // console.log(`[Auto Torch] Th·ª≠ ∆Øu ti√™n 1: ƒê·∫∑t d∆∞·ªõi ch√¢n l√™n ${blockBelow.name}...`);
        const placeTargetBelow = {
            block: blockBelow,
            faceVector: new Vec3(0, 1, 0), // ƒê·∫∑t l√™n m·∫∑t tr√™n
            position: blockAtFeet.position, // V·ªã tr√≠ d·ª± ki·∫øn c·ªßa ƒëu·ªëc (t·∫°i ch√¢n)
        };

        // Ki·ªÉm tra √°nh s√°ng v√† ƒëu·ªëc g·∫ßn t·∫°i v·ªã tr√≠ s·∫Ω ƒë·∫∑t (ch√¢n)
        const canPlaceFloorTorch = await canPlaceFloorTorchCheck(placeTargetBelow.position);
        if (canPlaceFloorTorch) {
            const placed = await validateAndPlaceTorch(placeTargetBelow, torchItem);
            if (placed) {
                console.log("[Auto Torch] ƒê·∫∑t ƒëu·ªëc d∆∞·ªõi ch√¢n th√†nh c√¥ng! ‚ú®");
                lastPlaceTime = Date.now();
                isProcessingAutoTorch = false;
                return true; // <-- TH√ÄNH C√îNG, K·∫æT TH√öC
            } else {
                // console.log("[Auto Torch] ƒê·∫∑t d∆∞·ªõi ch√¢n th·∫•t b·∫°i (validate/place).");
            }
        } else {
            // console.log("[Auto Torch] Kh√¥ng th·ªÉ ƒë·∫∑t d∆∞·ªõi ch√¢n (√°nh s√°ng/ƒëu·ªëc g·∫ßn).");
        }
    }

    // *** ∆ØU TI√äN 2: ƒê·∫∂T TR√äN T∆Ø·ªúNG G·∫¶N ***
    // console.log("[Auto Torch] Th·ª≠ ∆Øu ti√™n 2: T√¨m t∆∞·ªùng xung quanh...");
    // T√¨m ki·∫øm t·ª´ v·ªã tr√≠ ƒë·∫ßu bot ƒë·ªÉ ∆∞u ti√™n ƒë·∫∑t ngang t·∫ßm m·∫Øt
    const blockAtHead = botInstance.blockAt(botInstance.entity.position.offset(0, 1, 0));
    if (blockAtHead && blockAtHead.position) {
        const immediatePlaceTarget = await findValidTorchPlacementOriginal(blockAtHead.position);
        if (immediatePlaceTarget) {
            // console.log(`[Auto Torch] T√¨m th·∫•y t∆∞·ªùng t·∫°i ${formatCoords(immediatePlaceTarget.block.position)}, ƒë·∫∑t t·∫°i ${formatCoords(immediatePlaceTarget.position)}. Th·ª≠ ƒë·∫∑t...`);
            const placed = await validateAndPlaceTorch(immediatePlaceTarget, torchItem);
            if (placed) {
                console.log("[Auto Torch] ƒê·∫∑t ƒëu·ªëc l√™n t∆∞·ªùng th√†nh c√¥ng! ‚ú®");
                lastPlaceTime = Date.now();
                isProcessingAutoTorch = false;
                return true; // <-- TH√ÄNH C√îNG, K·∫æT TH√öC
            } else {
                // console.log("[Auto Torch] ƒê·∫∑t l√™n t∆∞·ªùng th·∫•t b·∫°i (validate/place).");
            }
        } else {
            // console.log("[Auto Torch] Kh√¥ng t√¨m th·∫•y t∆∞·ªùng h·ª£p l·ªá xung quanh.");
        }
    } else {
        //  console.warn("[Auto Torch] Kh√¥ng th·ªÉ l·∫•y block ·ªü ƒë·∫ßu ƒë·ªÉ t√¨m t∆∞·ªùng.");
    }


    // *** ∆ØU TI√äN 3: T·∫†O KH·ªêI V√Ä ƒê·∫∂T L√äN ***
    if (ENABLE_CREATE_SPOT) {
      // console.log("[Auto Torch] Th·ª≠ ∆Øu ti√™n 3: T·∫°o kh·ªëi ƒë·ªÉ ƒë·∫∑t ƒëu·ªëc...");
      const createdAndPlaced = await tryCreateAndPlaceTorch(torchItem);
      if (createdAndPlaced) {
        console.log("[Auto Torch] T·∫°o kh·ªëi v√† ƒë·∫∑t ƒëu·ªëc th√†nh c√¥ng! ‚ú®");
        lastPlaceTime = Date.now();
        isProcessingAutoTorch = false;
        return true; // <-- TH√ÄNH C√îNG, K·∫æT TH√öC
      } else {
        // Log l·ªói ƒë√£ c√≥ trong h√†m con
      }
    }

    // N·∫øu t·∫•t c·∫£ c√°c c√°ch tr√™n ƒë·ªÅu th·∫•t b·∫°i
    // console.log("[Auto Torch] Kh√¥ng th·ªÉ ƒë·∫∑t ƒëu·ªëc t·∫°i ch·ªó b·∫±ng m·ªçi c√°ch.");
    isProcessingAutoTorch = false;
    return false; // T·∫•t c·∫£ th·∫•t b·∫°i

  } catch (err) {
    console.error("[Auto Torch] L·ªói kh√¥ng mong mu·ªën trong checkAndPlaceTorch:", err.message, err.stack);
    if (err.message?.includes('TransactionExpiredError')) {
      console.warn("[Auto Torch] TransactionExpiredError - c√≥ th·ªÉ do lag server.");
    }
    isProcessingAutoTorch = false;
    return false;
  }
}

// --- H√†m ph·ª• tr·ª£ ---

// Ki·ªÉm tra ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi ƒë·∫∑t ƒëu·ªëc d∆∞·ªõi s√†n
async function canPlaceFloorTorchCheck(potentialTorchPos) {
    if (!potentialTorchPos) return false;

    const blockAtPlacement = botInstance.blockAt(potentialTorchPos);
    if (!blockAtPlacement) {
        // console.warn(`[Auto Torch Floor Check] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªëi t·∫°i ${formatCoords(potentialTorchPos)}.`);
        return false;
    }

    // Ki·ªÉm tra √°nh s√°ng t·∫°i v·ªã tr√≠ ƒë·∫∑t ti·ªÅm nƒÉng (d√πng PLACEMENT_LIGHT_THRESHOLD ƒë·ªÉ nh·∫•t qu√°n)
    if (blockAtPlacement.light >= PLACEMENT_LIGHT_THRESHOLD) {
        // console.log(`[Auto Torch Floor Check] B·ªè qua, √°nh s√°ng t·∫°i ${formatCoords(potentialTorchPos)} l√† ${blockAtPlacement.light} (>= ${PLACEMENT_LIGHT_THRESHOLD})`);
        return false;
    }

    // Ki·ªÉm tra ƒëu·ªëc g·∫ßn v·ªã tr√≠ ƒë·∫∑t ti·ªÅm nƒÉng
    const nearbyTorches = botInstance.findBlocks({
        point: potentialTorchPos,
        matching: (block) => block && (block.name === "torch" || block.name === "wall_torch"),
        maxDistance: MIN_TORCH_DISTANCE,
        count: 1,
    });
    if (Array.isArray(nearbyTorches) && nearbyTorches.length > 0) {
        // console.log(`[Auto Torch Floor Check] B·ªè qua, ƒë√£ c√≥ ƒëu·ªëc g·∫ßn t·∫°i ${formatCoords(nearbyTorches[0].position)}`);
        return false;
    }

    return true; // C√≥ th·ªÉ ƒë·∫∑t
}


// Ch·∫ø t·∫°o ƒëu·ªëc
async function checkAndCraftTorches() {
  const coalCount =
    botInstance.inventory.count(botInstance.registry.itemsByName.coal.id) +
    botInstance.inventory.count(botInstance.registry.itemsByName.charcoal.id);
  const stickCount = botInstance.inventory.count(
    botInstance.registry.itemsByName.stick.id
  );

  if (coalCount >= REQUIRED_COAL && stickCount >= REQUIRED_STICK) {
    if (!aiModelInstance) {
        // console.warn("[Auto Torch] Kh√¥ng c√≥ AI Model ƒë·ªÉ th·ª±c hi·ªán ch·∫ø t·∫°o.");
      return false;
    }
    try {
      console.log(`[Auto Torch] ƒêang y√™u c·∫ßu AI ch·∫ø t·∫°o ${TORCH_CRAFT_AMOUNT} ƒëu·ªëc...`);
      const crafted = await craftCommands.craftItem(
        botInstance,
        "System", // Ho·∫∑c t√™n ng∆∞·ªùi d√πng n·∫øu mu·ªën
        `ch·∫ø t·∫°o ${TORCH_CRAFT_AMOUNT} ƒëu·ªëc`,
        aiModelInstance,
        TORCH_CRAFT_AMOUNT // S·ªë l∆∞·ª£ng mong mu·ªën (AI c√≥ th·ªÉ kh√¥ng l√†m ƒë√∫ng)
      );

      if (crafted) {
        console.log("[Auto Torch] AI b√°o c√°o ƒë√£ ch·∫ø t·∫°o ƒëu·ªëc th√†nh c√¥ng.");
        return true;
      } else {
        // console.log("[Auto Torch] AI b√°o c√°o ch·∫ø t·∫°o ƒëu·ªëc th·∫•t b·∫°i.");
        return false;
      }
    } catch (craftError) {
      console.error("[Auto Torch] L·ªói khi g·ªçi h√†m craftItem:", craftError);
      return false;
    }
  } else {
    console.log(
      `[Auto Torch] Kh√¥ng ƒë·ªß nguy√™n li·ªáu (C·∫ßn ${REQUIRED_COAL} coal/charcoal, ${REQUIRED_STICK} stick. C√≥ ${coalCount}, ${stickCount}).`
    );
    return false;
  }
}

// T√¨m v·ªã tr√≠ ƒë·∫∑t tr√™n t∆∞·ªùng g·∫ßn
async function findValidTorchPlacementOriginal(searchPoint) {
  if (!botInstance || !botInstance.version || !searchPoint) return null;

  const placeableFacesData = [
    // { face: 0, vector: new Vec3(0, 1, 0) }, // M·∫∑t tr√™n - Kh√¥ng d√πng cho t∆∞·ªùng
    // { face: 1, vector: new Vec3(0, -1, 0) }, // M·∫∑t d∆∞·ªõi - Kh√¥ng d√πng cho t∆∞·ªùng
    { face: 2, vector: new Vec3(0, 0, 1) }, // +Z
    { face: 3, vector: new Vec3(0, 0, -1) }, // -Z
    { face: 4, vector: new Vec3(1, 0, 0) }, // +X
    { face: 5, vector: new Vec3(-1, 0, 0) }, // -X
  ];

  const nearbySolidBlocks = botInstance.findBlocks({
    matching: (block) =>
      block &&
      block.boundingBox === "block" && // Ph·∫£i l√† kh·ªëi r·∫Øn
      block.name !== "air" &&
      !block.name.includes("torch") &&
      !block.name.includes("sign") &&
      !block.name.includes("button") && // Th√™m c√°c kh·ªëi kh√¥ng n√™n ƒë·∫∑t l√™n
      !block.name.includes("lever") &&
      !block.name.includes("door") &&
      !block.name.includes("gate") &&
      !block.name.includes("chest") && // Kh√¥ng ƒë·∫∑t l√™n r∆∞∆°ng
      !block.name.includes("furnace") && // Kh√¥ng ƒë·∫∑t l√™n l√≤
      !block.name.includes("crafting_table"), // Kh√¥ng ƒë·∫∑t l√™n b√†n ch·∫ø t·∫°o
    point: searchPoint,
    maxDistance: CHECK_DISTANCE,
    count: 30,
  });

  let bestPlacement = null;
  let minDistanceSq = CHECK_DISTANCE * CHECK_DISTANCE; // T√¨m ƒëi·ªÉm g·∫ßn nh·∫•t trong t·∫ßm

  for (const pos of nearbySolidBlocks) {
    const wallBlock = botInstance.blockAt(pos);
    if (!wallBlock || !wallBlock.position) continue;

    for (const { face, vector } of placeableFacesData) {
      const torchPos = wallBlock.position.plus(vector); // V·ªã tr√≠ d·ª± ki·∫øn c·ªßa ƒëu·ªëc
      const blockAtTorchPos = botInstance.blockAt(torchPos);

      // Ch·ªâ ƒë·∫∑t v√†o kh·ªëi air
      if (blockAtTorchPos && blockAtTorchPos.name === "air") {
        if (!botInstance.entity || !botInstance.entity.position) continue; // C·∫ßn v·ªã tr√≠ bot ƒë·ªÉ t√≠nh kho·∫£ng c√°ch

        // T√≠nh kho·∫£ng c√°ch t·ª´ bot ƒë·∫øn v·ªã tr√≠ ƒëu·ªëc ti·ªÅm nƒÉng
        const distSq = botInstance.entity.position.distanceSquared(torchPos);

        // Ph·∫£i ƒë·ªß g·∫ßn bot ƒë·ªÉ ƒë·∫∑t (t·∫ßm v·ªõi ~4.5) v√† g·∫ßn h∆°n ƒëi·ªÉm t·ªët nh·∫•t hi·ªán t·∫°i
        if (distSq <= 4.5 * 4.5 && distSq < minDistanceSq) {
          // Ki·ªÉm tra √°nh s√°ng v√† ƒëu·ªëc g·∫ßn t·∫°i v·ªã tr√≠ s·∫Ω ƒë·∫∑t
           const canPlaceWallTorch = await canPlaceWallTorchCheck(torchPos);
           if(canPlaceWallTorch){
                minDistanceSq = distSq;
                bestPlacement = {
                  block: wallBlock, // Kh·ªëi t∆∞·ªùng ƒë·ªÉ ƒë·∫∑t l√™n
                  faceVector: vector, // M·∫∑t c·ªßa kh·ªëi t∆∞·ªùng ƒë√≥
                  position: torchPos, // T·ªça ƒë·ªô c·ªßa kh·ªëi air n∆°i ƒëu·ªëc s·∫Ω xu·∫•t hi·ªán
                };
           }
        }
      }
    }
  }
  // if (!bestPlacement) console.log("[Auto Torch] Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ t∆∞·ªùng h·ª£p l·ªá g·∫ßn ƒë√≥.");
  return bestPlacement;
}

// Ki·ªÉm tra ƒëi·ªÅu ki·ªán tr∆∞·ªõc khi ƒë·∫∑t ƒëu·ªëc l√™n t∆∞·ªùng
async function canPlaceWallTorchCheck(potentialTorchPos) {
    if (!potentialTorchPos) return false;

    const blockAtPlacement = botInstance.blockAt(potentialTorchPos);
    if (!blockAtPlacement) {
        // console.warn(`[Auto Torch Wall Check] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªëi t·∫°i ${formatCoords(potentialTorchPos)}.`);
        return false;
    }

    // Ki·ªÉm tra √°nh s√°ng t·∫°i v·ªã tr√≠ ƒë·∫∑t ti·ªÅm nƒÉng
    if (blockAtPlacement.light >= PLACEMENT_LIGHT_THRESHOLD) {
        // console.log(`[Auto Torch Wall Check] B·ªè qua, √°nh s√°ng t·∫°i ${formatCoords(potentialTorchPos)} l√† ${blockAtPlacement.light} (>= ${PLACEMENT_LIGHT_THRESHOLD})`);
        return false;
    }

    // Ki·ªÉm tra ƒëu·ªëc g·∫ßn v·ªã tr√≠ ƒë·∫∑t ti·ªÅm nƒÉng
    const nearbyTorches = botInstance.findBlocks({
        point: potentialTorchPos,
        matching: (block) => block && (block.name === "torch" || block.name === "wall_torch"),
        maxDistance: MIN_TORCH_DISTANCE,
        count: 1,
    });
    if (Array.isArray(nearbyTorches) && nearbyTorches.length > 0) {
        // console.log(`[Auto Torch Wall Check] B·ªè qua, ƒë√£ c√≥ ƒëu·ªëc g·∫ßn t·∫°i ${formatCoords(nearbyTorches[0].position)}`);
        return false;
    }

    return true; // C√≥ th·ªÉ ƒë·∫∑t
}


// X√°c th·ª±c v√† th·ª±c hi·ªán ƒë·∫∑t ƒëu·ªëc
async function validateAndPlaceTorch(placeTarget, torchItem) {
  if (
    !placeTarget || !placeTarget.position || !placeTarget.block ||
    !placeTarget.faceVector || !torchItem
  ) {
    console.warn("[Auto Torch Validate] D·ªØ li·ªáu ƒë·∫∑t kh√¥ng h·ª£p l·ªá.");
    return false;
  }

  const potentialTorchPos = placeTarget.position;
  const blockToPlaceOn = placeTarget.block;
  const faceToPlaceOn = placeTarget.faceVector;

  // Ki·ªÉm tra t·∫ßm v·ªõi l·∫ßn cu·ªëi (d√π logic t√¨m ki·∫øm ƒë√£ c·ªë g·∫Øng ƒë·∫£m b·∫£o)
  if (!botInstance.entity || !botInstance.entity.position) {
    // console.warn("[Auto Torch Validate] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ bot ƒë·ªÉ ki·ªÉm tra t·∫ßm v·ªõi.");
    return false;
  }
  const distanceSq = botInstance.entity.position.distanceSquared(potentialTorchPos);
  // Cho ph√©p xa h∆°n m·ªôt ch√∫t ph√≤ng tr∆∞·ªùng h·ª£p ƒë·∫∑t d∆∞·ªõi ch√¢n ho·∫∑c t∆∞·ªùng h∆°i xa
  if (distanceSq > 5.0 * 5.0) {
    // console.log(`[Auto Torch Validate] V·ªã tr√≠ ƒë·∫∑t ${formatCoords(potentialTorchPos)} qu√° xa (distSq: ${distanceSq.toFixed(2)}).`);
    return false;
  }

  // Ki·ªÉm tra l·∫°i √°nh s√°ng v√† ƒëu·ªëc g·∫ßn (ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra b·ªüi canPlace... nh∆∞ng ch·∫Øc ƒÉn)
  const blockAtPlacement = botInstance.blockAt(potentialTorchPos);
  if (!blockAtPlacement) {
    // console.warn(`[Auto Torch Validate] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh·ªëi t·∫°i v·ªã tr√≠ ƒë·∫∑t ${formatCoords(potentialTorchPos)}.`);
    return false;
  }
  if (blockAtPlacement.light >= PLACEMENT_LIGHT_THRESHOLD) {
    // console.log(`[Auto Torch Validate] √Ånh s√°ng t·∫°i v·ªã tr√≠ ƒë·∫∑t ${formatCoords(potentialTorchPos)} l√† ${blockAtPlacement.light}, qu√° cao.`);
    return false;
  }
  const nearbyTorches = botInstance.findBlocks({
    point: potentialTorchPos,
    matching: (block) => block && (block.name === "torch" || block.name === "wall_torch"),
    maxDistance: MIN_TORCH_DISTANCE,
    count: 1,
  });
  if (Array.isArray(nearbyTorches) && nearbyTorches.length > 0) {
    // console.log(`[Auto Torch Validate] ƒê√£ c√≥ ƒëu·ªëc kh√°c qu√° g·∫ßn t·∫°i ${formatCoords(nearbyTorches[0].position)}.`);
    return false;
  }

  // Th·ª±c hi·ªán ƒë·∫∑t
  try {
    // ƒê·∫£m b·∫£o ƒëang c·∫ßm ƒëu·ªëc
    if (!botInstance.heldItem || botInstance.heldItem.type !== torchItem.type) {
      // console.log("[Auto Torch Validate] ƒêang trang b·ªã ƒëu·ªëc...");
      await botInstance.equip(torchItem, "hand");
      await sleep(250); // Ch·ªù equip xong
    }

    // Nh√¨n v√†o kh·ªëi s·∫Ω ƒë·∫∑t (quan tr·ªçng ƒë·ªÉ placeBlock ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh)
    // await botInstance.lookAt(blockToPlaceOn.position.offset(0.5, 0.5, 0.5), true); // Nh√¨n v√†o gi·ªØa kh·ªëi
    // await sleep(100); // Ch·ªù nh√¨n xong

    // ƒê·∫∑t kh·ªëi
    // console.log(`[Auto Torch Validate] Th·ª±c hi·ªán placeBlock l√™n ${blockToPlaceOn.name} t·∫°i ${formatCoords(blockToPlaceOn.position)} v·ªõi face ${formatCoords(faceToPlaceOn)}`);
    await botInstance.placeBlock(blockToPlaceOn, faceToPlaceOn);
    // console.log("[Auto Torch Validate] L·ªánh placeBlock ƒë√£ g·ª≠i.");
    await sleep(150); // Ch·ªù server x·ª≠ l√Ω ƒë·∫∑t block
    return true; // Gi·∫£ ƒë·ªãnh th√†nh c√¥ng n·∫øu kh√¥ng c√≥ l·ªói

  } catch (placeError) {
    console.warn(`[Auto Torch Validate] L·ªói khi ƒë·∫∑t ƒëu·ªëc: ${placeError.message}`);
    if ( placeError.message.includes("Must be targeting a block") || placeError.message.includes("rejected transaction") || placeError.message.includes("Server misbehaved") || placeError.message.includes("invalid direction"))
    {
      // L·ªói th∆∞·ªùng g·∫∑p, kh√¥ng c·∫ßn log stack
    } else {
        console.error(placeError.stack); // Log stack cho l·ªói l·∫°
    }
    return false;
  }
}

// T·∫°o kh·ªëi v√† ƒë·∫∑t ƒëu·ªëc l√™n
async function tryCreateAndPlaceTorch(torchItem) {
  const createBlockInfo = botInstance.registry.itemsByName[CREATE_SPOT_BLOCK_NAME];
  if (!createBlockInfo) {
    // console.warn(`[Auto Torch Create] Kh√¥ng t√¨m th·∫•y th√¥ng tin cho kh·ªëi ${CREATE_SPOT_BLOCK_NAME}.`);
    return false;
  }

  const createBlockItem = botInstance.inventory.findInventoryItem(createBlockInfo.id);
  if (!createBlockItem) {
    // console.log(`[Auto Torch Create] Kh√¥ng c√≥ ${CREATE_SPOT_BLOCK_NAME} trong t√∫i ƒë·ªì.`);
    return false;
  }

  const botPos = botInstance.entity.position;
  if (!botPos) return false;

  let placementBaseBlock = null; // Kh·ªëi d∆∞·ªõi ƒë·∫•t ƒë·ªÉ ƒë·∫∑t kh·ªëi m·ªõi l√™n
  let placePos = null; // V·ªã tr√≠ c·ªßa kh·ªëi m·ªõi s·∫Ω t·∫°o
  let bestDistSq = 3 * 3; // T√¨m v·ªã tr√≠ g·∫ßn nh·∫•t trong ph·∫°m vi 3x3

  // C√°c v·ªã tr√≠ xung quanh bot (∆∞u ti√™n ngang t·∫ßm)
  const offsets = [
    { x: 1, z: 0 }, { x: -1, z: 0 }, { x: 0, z: 1 }, { x: 0, z: -1 },
    { x: 1, z: 1 }, { x: 1, z: -1 }, { x: -1, z: 1 }, { x: -1, z: -1 },
  ];

  // T√¨m v·ªã tr√≠ t·ªët nh·∫•t ƒë·ªÉ t·∫°o kh·ªëi
  for (const offset of offsets) {
    const checkPlacePos = botPos.offset(offset.x, 0, offset.z).floored(); // V·ªã tr√≠ ngang t·∫ßm bot
    const checkBasePos = checkPlacePos.offset(0, -1, 0); // V·ªã tr√≠ kh·ªëi ngay d∆∞·ªõi ƒë√≥

    const blockAtPlace = botInstance.blockAt(checkPlacePos); // Kh·ªëi t·∫°i v·ªã tr√≠ ngang t·∫ßm
    const blockAtBase = botInstance.blockAt(checkBasePos); // Kh·ªëi d∆∞·ªõi ƒë·∫•t

    // C·∫ßn: Kh·ªëi d∆∞·ªõi ƒë·∫•t ph·∫£i r·∫Øn, v·ªã tr√≠ ngang t·∫ßm ph·∫£i l√† air
    if ( blockAtBase && blockAtBase.boundingBox === "block" && blockAtBase.position &&
         blockAtPlace && blockAtPlace.name === "air" )
    {
      const distSq = checkPlacePos.distanceSquared(botPos);
      // Ph·∫£i ƒë·ªß g·∫ßn ƒë·ªÉ ƒë·∫∑t (<4.5) v√† g·∫ßn h∆°n ƒëi·ªÉm t·ªët nh·∫•t hi·ªán t·∫°i
      if (distSq <= 4.5 * 4.5 && distSq < bestDistSq) {
        // Ki·ªÉm tra xem c√≥ th·ªÉ ƒë·∫∑t kh·ªëi M·ªöI l√™n kh·ªëi base kh√¥ng
        if (blockAtBase.canPlaceOn) {
            try {
                // canPlaceBlock kh√¥ng tin c·∫≠y 100%, nh∆∞ng v·∫´n n√™n th·ª≠
                 if (await botInstance.canPlaceBlock(blockAtBase, new Vec3(0, 1, 0))) {
                    placementBaseBlock = blockAtBase;
                    placePos = checkPlacePos; // L∆∞u v·ªã tr√≠ s·∫Ω t·∫°o kh·ªëi
                    bestDistSq = distSq;
                 }
            } catch (e) { /* B·ªè qua l·ªói canPlaceBlock */ }
        }
      }
    }
  }

  // Kh√¥ng t√¨m ƒë∆∞·ª£c ch·ªó th√≠ch h·ª£p ƒë·ªÉ t·∫°o kh·ªëi
  if (!placementBaseBlock || !placePos) {
    // console.log("[Auto Torch Create] Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ ph√π h·ª£p ƒë·ªÉ t·∫°o kh·ªëi.");
    return false;
  }

  // Ti·∫øn h√†nh t·∫°o kh·ªëi
  try {
    // C·∫ßm kh·ªëi c·∫ßn t·∫°o
    if (!botInstance.heldItem || botInstance.heldItem.type !== createBlockItem.type) {
      // console.log(`[Auto Torch Create] Trang b·ªã ${CREATE_SPOT_BLOCK_NAME}...`);
      await botInstance.equip(createBlockItem, "hand");
      await sleep(250);
    }

    // ƒê·∫∑t kh·ªëi t·∫°o ƒëi·ªÉm t·ª±a
    const placeVector = new Vec3(0, 1, 0); // ƒê·∫∑t l√™n tr√™n kh·ªëi base
    // console.log(`[Auto Torch Create] ƒê·∫∑t ${CREATE_SPOT_BLOCK_NAME} l√™n ${placementBaseBlock.name} t·∫°i ${formatCoords(placementBaseBlock.position)}...`);
    await botInstance.placeBlock(placementBaseBlock, placeVector);
    await sleep(400); // Ch·ªù kh·ªëi xu·∫•t hi·ªán

    // Ki·ªÉm tra xem kh·ªëi ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng ch∆∞a
    const newBlock = botInstance.blockAt(placePos);
    if (!newBlock || newBlock.name !== CREATE_SPOT_BLOCK_NAME || !newBlock.position) {
      // console.warn(`[Auto Torch Create] ƒê√£ g·ª≠i l·ªánh nh∆∞ng kh√¥ng th·∫•y kh·ªëi ${CREATE_SPOT_BLOCK_NAME} t·∫°i ${formatCoords(placePos)}.`);
      return false;
    }
    // console.log(`[Auto Torch Create] ƒê√£ t·∫°o ${CREATE_SPOT_BLOCK_NAME} t·∫°i ${formatCoords(placePos)}. Gi·ªù ƒë·∫∑t ƒëu·ªëc l√™n tr√™n...`);

    // Chu·∫©n b·ªã ƒë·ªÉ ƒë·∫∑t ƒëu·ªëc l√™n kh·ªëi v·ª´a t·∫°o
    const torchPlaceTarget = {
      block: newBlock, // ƒê·∫∑t l√™n kh·ªëi m·ªõi t·∫°o
      faceVector: new Vec3(0, 1, 0), // ƒê·∫∑t l√™n m·∫∑t tr√™n c·ªßa n√≥
      position: newBlock.position.plus(new Vec3(0, 1, 0)), // V·ªã tr√≠ c·ªßa ƒëu·ªëc
    };

    // G·ªçi h√†m validate ƒë·ªÉ ki·ªÉm tra √°nh s√°ng/ƒëu·ªëc g·∫ßn v√† ƒë·∫∑t
    return await validateAndPlaceTorch(torchPlaceTarget, torchItem);

  } catch (createError) {
    // console.warn(`[Auto Torch Create] L·ªói khi t·∫°o kh·ªëi ${CREATE_SPOT_BLOCK_NAME} t·∫°i ${formatCoords(placePos)}: ${createError.message}`);
    // if (createError.message.includes("Must be targeting a block")) console.warn("[Auto Torch Create] L·ªói 'Must be targeting a block'.");
    return false;
  }
}

// Format t·ªça ƒë·ªô cho log
function formatCoords(pos) {
  if (!pos || typeof pos.x !== "number" || typeof pos.y !== "number" || typeof pos.z !== "number") {
    return "N/A";
  }
  return `(${Math.floor(pos.x)}, ${Math.floor(pos.y)}, ${Math.floor(pos.z)})`;
}

// --- Exports ---
module.exports = {
  initializeAutoTorch,
  checkAndPlaceTorch,
  // Getter ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i t·ª´ b√™n ngo√†i n·∫øu c·∫ßn
  get isProcessingAutoTorch() {
    return isProcessingAutoTorch;
  },
};
// --- END OF FILE commands/auto_torch.js ---